batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 9, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe[-1],
epochs =100,
batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe[-1],
epochs =100,
batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 1, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe[-1],
epochs =100,
batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =7, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 1, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 1, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units =9, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model
summary(model)
summary(model)
model1 <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units =9, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model1
model1 %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
model1 <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units =9, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model1
model1 %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model1 %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model1 %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
# pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(predict(model, as.matrix(x.test.df)), 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
model1 <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units =9, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model1
model1 %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model1 %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model1 %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
paste0("Overall Accuracy: ", signif(confusion.matrix[["overall"]][["Accuracy"]], 4))
pred.prob <- predict(model1, as.matrix(x.test.df))
pred.prob <- predict(model1, as.matrix(x.test.df))
pred.prob
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
pred.class
pred.prob <- predict(model1, as.matrix(x.test.df))
pred.prob
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
pred.class
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
pred.prob <- predict(model1, as.matrix(x.test.df))
# pred.prob
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
# pred.class
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
confusion.matrix[accuracy]
confusion.matrix['accuracy']
confusion.matrix
confusion.matrix$overall['Accuracy']
create_model.n <- function(neurons) {
model <- keras_model_sequential() %>%
layer_dense(units = 8, activation="relu", input_shape=c(7)) %>%
layer_dense(units = neurons, activation="relu") %>%
layer_dense(units = 4, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs=100,
batch_size=32,
validation_split=0.20)
return (model)
}
for(n in 10){
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Overall Accuracy with ",neurons," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
create_model.n <- function(neurons) {
model <- keras_model_sequential() %>%
layer_dense(units = 8, activation="relu", input_shape=c(7)) %>%
layer_dense(units = neurons, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs=100,
batch_size=32,
validation_split=0.20)
return (model)
}
for(n in 10){
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Overall Accuracy with ",neurons," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
for(n in 10){
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
create_model.n <- function(neurons) {
model <- keras_model_sequential() %>%
layer_dense(units = 8, activation="relu", input_shape=c(7)) %>%
layer_dense(units = neurons, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs=100,
batch_size=32,
validation_split=0.20)
print("@@@@@")
return (model)
}
for(n in 10){
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 10){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 1: 10){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 1: 4){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
print("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 1: 4){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 2: 4){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
print(signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in c(2,3,4,5,6,7,8,9)){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
print(signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.90){
break
}
}
n=0
for(n in 10:25){
print(n)
model <-create_model.n(n)
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
paste0("Accuracy with ",n," neurons  : ", signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
print(signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
if(confusion.matrix$overall['Accuracy']<0.96){
break
}
}
model.high <-create_model.n(11)
pred.prob <- predict(model.high, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
pred.prob <- predict(model.high, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
library(keras)
library(dplyr)
library(caret)
library(rpart)
rm(list=ls())
# Set working directory as needed
df <- read.csv("wifi_localization.csv")
set.seed(1122)
df <- df[sample(nrow(df)), ]
index <- sample(1:nrow(df), 0.20*nrow(df))
test.df  <- df[index, ]
train.df <- df[-index, ]
train.without.res.df <- select(train.df, -room)
test.without.res.df <- select(test.df, -room)
# train.without.res.df
# test.without.res.df
train.with.res.df <- train.df$room
train.with.res.df.cato <- to_categorical(train.with.res.df)
# train.with.res.df
# train.with.res.df.cato
train.with.res.df <- test.df$room
train.with.res.df.cato <- to_categorical(train.with.res.df)
# train.with.res.df
# train.with.res.df.cato
# head( train.with.res.df.cato)
# head(train.without.res.df)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(train.without.res.df),
train.with.res.df.cato,
epochs =100,
batch_size=32,
validation_split=0.20)
model <-NULL
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(train.without.res.df),
train.with.res.df.cato,
epochs =100,
batch_size=32,
validation_split=0.20)
library(keras)
library(dplyr)
library(caret)
library(rpart)
rm(list=ls())
# Set working directory as needed
df <- read.csv("wifi_localization.csv")
set.seed(1122)
df <- df[sample(nrow(df)), ]
indx <- sample(1:nrow(df), 0.20*nrow(df))
test.df  <- df[indx, ]
train.df <- df[-indx, ]
x.train.df <- select(train.df, -room)
x.test.df <- select(test.df, -room)
# x.train.df
# x.test.df
y.train.df <- train.df$room
y.train.df.ohe <- to_categorical(y.train.df)
# y.train.df
# y.train.df.ohe
y.test.df <- test.df$room
y.test.df.ohe <- to_categorical(y.test.df)
# y.test.df
# y.test.df.ohe
# head( y.train.df.ohe)
# head(x.train.df)
model <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units = 5, activation="softmax")
model
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
pred.prob <- predict(model, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
model1 <- keras_model_sequential() %>%
layer_dense(units =9, activation="relu", input_shape=c(7)) %>%
layer_dense(units =9, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model1
model1 %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model1 %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs =100,
batch_size=32,
validation_split=0.20)
c(loss,accuracy) %<-% (model1 %>% evaluate(as.matrix(x.test.df), y.test.df.ohe))
pred.prob <- predict(model1, as.matrix(x.test.df))
# pred.prob
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
# pred.class
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
# confusion.matrix
create_model.n <- function(neurons) {
model <- keras_model_sequential() %>%
layer_dense(units = 8, activation="relu", input_shape=c(7)) %>%
layer_dense(units = neurons, activation="relu") %>%
layer_dense(units = 5, activation="softmax")
model %>% compile(loss = "categorical_crossentropy",
optimizer="adam",
metrics=c("accuracy"))
model %>% fit(
data.matrix(x.train.df),
y.train.df.ohe,
epochs=100,
batch_size=32,
validation_split=0.20)
# print("@@@@@")
return (model)
}
n=0
for(n in 1:25){
# print(n)
model2 <-create_model.n(n)
pred.prob <- predict(model2, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
print(signif(confusion.matrix[["overall"]][["Accuracy"]], 3))
}
model.high <-create_model.n(11)
pred.prob <- predict(model.high, as.matrix(x.test.df))
pred.class <- apply(pred.prob, 1, function(x) which.max(x)-1)
confusion.matrix <- confusionMatrix(as.factor(pred.class), as.factor(y.test.df))
confusion.matrix
unlink("HW7/Problem-2-1-Template_cache", recursive = TRUE)
